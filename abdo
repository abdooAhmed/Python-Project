import pygame,sys,time,random
from pygame.locals import *
fbs=30
windowWidth=640
windowHieght=480
REVEALSPEED = 8
BOXSIZE = 40
GAPSIZE = 10
GRAY = (100, 100, 100)
NAVYBLUE = ( 60, 60, 100)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = ( 0, 255, 0)
BLUE = ( 0, 0, 255)
YELLOW = (255, 255, 0)
ORANGE = (255, 128, 0)
PURPLE = (255, 0, 255)
CYAN = ( 0, 255, 255)
my=(125,175,225)
DONUT = 'donut'
SQUARE = 'square'
DIAMOND = 'diamond'
LINES = 'lines'
OVAL = 'oval'
borderwidth=10
borderheight=7
BGCOLOR = NAVYBLUE
LIGHTBGCOLOR = GRAY
BOXCOLOR = WHITE
HIGHLIGHTCOLOR = BLUE
allcolor=[GRAY,my,WHITE,RED,GREEN,BLUE,YELLOW,ORANGE,PURPLE,CYAN]
allshape=[DONUT,SQUARE,DIAMOND,LINES,OVAL]
assert len(allcolor) * len(allshape) * 2 >= borderheight * borderwidth,"Board is too big for the number of shapes/colors defined."
XMARGIN = int((windowWidth - (borderwidth * (BOXSIZE + GAPSIZE))) / 2)
YMARGIN = int((windowHieght - (borderheight * (BOXSIZE + GAPSIZE))) / 2)
def generatrevalboxes(val):
    revalboxes=[]
    for i in range(borderwidth):
        revalboxes.append([False]*borderheight)
    return revalboxes
def randomBoard():
    icon=[]
    for color in allcolor:
        for shape in allshape:
            icon.append((shape,color))
    random.shuffle(icon)
    num=int((borderwidth*borderheight)/2)
    icon=(icon[:num])*2
    random.shuffle(icon)
    border=[]
    for x in range(borderwidth):
        col=[]
        for y in range(borderheight):
            col.append(icon[0])
            del icon[0]
        border.append(col)
    return border
def startGameAnimation(board):
    print(board)
    coveredBoxes =generatrevalboxes(False)
    boxes = []
    for x in range(borderwidth):
        for y in range(borderheight):
            boxes.append((x, y))
    random.shuffle(boxes)
    boxGroups = spiltlist(8, boxes)
    drawBoard(board, coveredBoxes)
    for boxGroup in boxGroups:
        revealBoxesAnimation(board, boxGroup)
    time.sleep(2)
def drawBoard(board, revealed):
    for boxx in range(borderwidth):
        for boxy in range(borderheight):
            left, top = lefttopcoorderbox(boxx, boxy)
            if not revealed[boxx][boxy]:
                pygame.draw.rect(DISPLAYSURF, BOXCOLOR, (left, top,BOXSIZE, BOXSIZE))
            else:
                 print('true')
                 shape, color = getShapeAndColor(board, boxx, boxy)
                 icondrawn(shape, color, boxx, boxy)
def icondrawn(shape,color,boxx,boxy):
    quarter=int((BOXSIZE*.25))
    half=int((BOXSIZE*.5))
    left,top=lefttopcoorderbox(boxx,boxy)
    if shape==DONUT:
        pygame.draw.circle(DISPLAYSURF, color, (left + half, top + half),half - 5)
        pygame.draw.circle(DISPLAYSURF, BGCOLOR, (left + half, top +half), quarter - 5)
    elif shape==SQUARE:
        pygame.draw.rect(DISPLAYSURF, color, (left + quarter, top +quarter, BOXSIZE - half, BOXSIZE - half))
    elif shape == DIAMOND:
        pygame.draw.polygon(DISPLAYSURF, color, ((left + half, top), (left+ BOXSIZE - 1, top + half),(left + half, top + BOXSIZE - 1), (left, top +half)))
    elif shape== LINES:
        for i in range(0, BOXSIZE, 4):
            pygame.draw.line(DISPLAYSURF, color, (left, top + i), (left +i, top))
            pygame.draw.line(DISPLAYSURF, color, (left + i, top + BOXSIZE- 1), (left + BOXSIZE - 1, top + i))
    elif shape == OVAL:
        pygame.draw.ellipse(DISPLAYSURF, color, (left, top + quarter,BOXSIZE, half))
def spiltlist(groupsize,list):
    result=[]
    for i in range(0,len(list),groupsize):
        result.append(list[i:i+groupsize])
    return result
def lefttopcoorderbox(boxx,boxy):
    left=boxx*(BOXSIZE+GAPSIZE)+XMARGIN
    top=boxy*(BOXSIZE+GAPSIZE)+YMARGIN
    return (left,top)
def coverBoxesAnimation(board, boxesToCover):
    for coverage in range(0, BOXSIZE + REVEALSPEED, REVEALSPEED):
        drawBoxCovers(board, boxesToCover,coverage)
def drawBoxCovers(board, boxes,coverage):
    i=0
    for box in boxes:
        left, top = lefttopcoorderbox(box[0], box[1])
        pygame.draw.rect(DISPLAYSURF, BGCOLOR, (left, top, BOXSIZE, BOXSIZE))
        shape, color = getShapeAndColor(board, box[0], box[1])
        i+=1
        print(i)
        print(shape,color)
        icondrawn(shape, color, box[0], box[1])
        if coverage > 0:
            pygame.draw.rect(DISPLAYSURF, BOXCOLOR, (left, top, BOXSIZE, BOXSIZE))
    pygame.display.update()
    FPSCLOCK.tick(fbs)
def getShapeAndColor(board, boxx, boxy):
    return board[boxx][boxy][0],board[boxx][boxy][1]
def getpixel(x,y):
    for boxx in range(borderwidth):
        for boxy in range(borderheight):
            left,top=lefttopcoorderbox(boxx,boxy)
            rect=pygame.Rect(left,top,BOXSIZE,BOXSIZE)
            if rect.collidepoint(x,y):
                return boxx,boxy
    return None,None
def drawHighlightBox(boxx, boxy):
     left, top = lefttopcoorderbox(boxx, boxy)
     pygame.draw.rect(DISPLAYSURF, HIGHLIGHTCOLOR, (left - 5, top - 5,BOXSIZE + 10, BOXSIZE + 10), 4)
def main():
    global FPSCLOCK, DISPLAYSURF
    pygame.init()
    FPSCLOCK = pygame.time.Clock()
    DISPLAYSURF = pygame.display.set_mode((windowWidth,windowHieght))
    mousex = 0  # used to store x coordinate of mouse event
    mousey = 0  # used to store y coordinate of mouse event
    pygame.display.set_caption('Memory Game')
    mainBoard = randomBoard()
    revealedBoxes = generatrevalboxes(False)
    firstSelection = None  # stores the (x, y) of the first box clicked.
    DISPLAYSURF.fill(BGCOLOR)
    startGameAnimation(mainBoard)
    while True:
        mouseClicked = False
        DISPLAYSURF.fill(BGCOLOR)  # drawing the window
        drawBoard(mainBoard, revealedBoxes)
        for event in pygame.event.get():
            if event.type == QUIT or(event.type==KEYUP and event.key==K_ESCAPE):
                pygame.quit()
                sys.exit()
            elif event.type==MOUSEMOTION:
                mousex,mousey=event.pos
            elif event.type==MOUSEBUTTONUP:
                mousex,mousey=event.pos
                mouseClicked=True
        boxx,boxy=getpixel(mousex,mousey)
        if boxx!=None and boxy!=None:
            if not revealedBoxes[boxx][boxy]:
                drawHighlightBox(boxx,boxy)
        if boxx!=None and boxy!=None and mouseClicked:
            revealBoxesAnimation(mainBoard,[(boxx,boxy)])
            revealedBoxes[boxx][boxy]=True
            if firstSelection==None:
                firstSelection=(boxx,boxy)
            else:
                iconcol1,iconshap1=getShapeAndColor(mainBoard,firstSelection[0],firstSelection[1])
                iconcol2,iconshap2=getShapeAndColor(mainBoard,boxx,boxy)
                if iconcol1!=iconcol2 or iconshap1!=iconshap2:
                    pygame.time.wait(1000)
                    coverBoxesAnimation(mainBoard,[(firstSelection[0],firstSelection[1]),(boxx,boxy)])
                    revealedBoxes[firstSelection[0]][firstSelection[1]]=False
                    revealedBoxes[boxx][boxy]=False
                elif haswon(revealedBoxes):
                    gameWonAnimation(mainBoard)
                    pygame.time.wait(2000)
                firstSelection=None
        pygame.display.update()
        FPSCLOCK.tick(fbs)
def revealBoxesAnimation(board, boxesToReveal):
    for coverage in range(BOXSIZE, (-REVEALSPEED) - 1, - REVEALSPEED):
        drawBoxCovers(board, boxesToReveal, coverage)
print(lefttopcoorderbox(9,0))
def haswon(reval):
    for i in reval:
        if False in i:
            return False
    return True
def gameWonAnimation(board):
 # flash the background color when the player has won
  coveredBoxes = generatrevalboxes(True)
  color1 = LIGHTBGCOLOR
  color2 = BGCOLOR
  for i in range(13):
     color1, color2 = color2, color1 # swap colors
     DISPLAYSURF.fill(color1)
     drawBoard(board, coveredBoxes)
     pygame.display.update()
     pygame.time.wait(300)

main()